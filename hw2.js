# Дан код:
  var a = 1, b = 1, c, d;
  c = ++a; alert(c);           // 2
  d = b++; alert(d);           // 1
  c = (2+ ++a); alert(c);      // 5
  d = (2+ b++); alert(d);      // 4
  alert(a);                    // 3
  alert(b);                    // 3
  Почему код даёт именно такие результаты?
    
//     Первый случай - сначала увеличили значение а на 1, потом присвоили результат в c.
//     Второй случай - сначала присвоили значение в d(b все еще = 1), а потом увеличили значение b на 1. 
//     В первом случае c равняется результату операции а+1, во втором же, d присваивается значение b, а потом мы уже меняем значение b. В этом разница ++a и b++.
//     В третьем и в четвертом случаях, изначально а=2 и b=2 (благодаря предыдущим операциям). Далее аналогично.
//     В третьем случае мы сначала увеличиваем а, а в четвертом сначала получаем результат с изначальным значением b.
     
//     Проще говоря: c=++a расписывается в такие 2 строчки:
//       a=a+1;
//       c=a;
//     А d = b++ :
//       d=b;
//       b=b+1;

# Чему будет равен x в примере ниже?
  var a = 2;
  var x = 1 + (a *= 2);

  //x=5. сначала получаем новое значение a*=2; т.е. 4. Потом уже результат сложения. 


# Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
  если a и b положительные, вывести их разность;
  если а и b отрицательные, вывести их произведение;
  если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
  
  var a = parseInt(prompt('введите целое число');
  var b = parseInt(prompt('введите целое число');
  if(a>0 & b>0) {
    alert(a-b);
  }
  else if(a<0 & b<0) {
    alert(a*b);  
  }
  else {
    alert(a+b);
  }

# Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. 
  Дополнительное задание. Сделайте решение вторым способом, используя рекурсию.
  
  //я не совсем понял, как это сделать через switch, кроме откровенно тупого варианта. Только такой и есть, или я просто туплю?;
  
  a = parseInt(prompt("Введите число от 0 до 15"));
      
      switch (a) {
        case 0 :
          alert(0123456789101112131415);
          break;
        case 1 :
          alert(123456789101112131415);
          break;
        case 2 :
          alert(23456789101112131415);
          break;
        
        case 3 :
          alert(3456789101112131415);
          break;
        
        case 4 :
          alert(456789101112131415);
          break;
          
        // ну и в общем так далее, вы поняли. Как вариант прописать и по отдельности: alert(1), alert(2) и т.д. Т.е. крайне по обезьяньи.
        // В конце же :
        
        case 15 :
          alert(15);
          break;
          
        default :
          alert("Число не из промежутка [0..15]");
          break;
          
        //серьезно, почему switch? Я чего-то не вижу, 100%. Я бы использовал операторы for или while, но это тема следующего урока.
        //Я хочу спать, но я сделаю рекурсию. Recursions are cool!
          
          function fromZeroToFifteen(a) {
            if(a>=0 & a<=15){
              alert(a);
              a++;
              fromZeroToFifteen(a);
            }            
          }
        

# Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
  
  function sum(a,b) {
    return a+b;
  }
  function substract(a,b) {
    return a-b;
  }
  function multiply(a,b) {
    return a*b;
  }
  function divide(a,b) {
    if(b!=0) {
      return a/b;
    }
    else
      return 0;
    //да, в задании этого не было, да и вообще, здесь бы ошибку выводить. Ограничимся значением 0. Просто чтобы нельзя было сломать :D
  }

# Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. 
  В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).

  function mathOperation(arg1, arg2, operation) {
    var result;
    
    switch(operation) {
      case '+' :
        result = sum(arg1, arg2);
        break;
      case '-' :
        result = substract(arg1, arg2);
        break;
      case '*' :
        result = multiply(arg1, arg2);
        break;
      case '/' :
        result = divide(arg1, arg2);
        break;
      default :
        alert("Error!");
        break;
    }
    return result;
  }
  
# *Сравнить null и 0. Попробуйте объяснить результат.
//   в общем-то они неравны, нечего даже сравнивать. null - пустое значение, "ничего". 0 - это ноль, это уже существующее значение.

# *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
  function power(val, pow) {
    if(pow>1) {
      pow--;
      return val * power(val,pow);
    }
    else if(pow=1){
      return val;
    }
    else if(pow=0) {
      return 1;
    }
    else {
      pow*=-1;
      return 1/power(val, pow);
    }
  }
